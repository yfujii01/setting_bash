alias ll='ls -alF'
alias la='ls -alF'
alias l='ls -alF'
alias sshpi='ssh pi@0.tcp.ap.ngrok.io -p'
alias sftppi='echo "sftp -P xxxx pi@0.tcp.ap.ngrok.io"'
alias g='grep'

alias volume='amixer sset Speaker'

alias e='emacs'

#git関連
alias gf='git fetch'
alias gs='git status --short'
alias ga='git add .'
alias gc='git commit'
alias gp='git push origin HEAD'
alias gd='git diff --name-only '
alias gdw='git difftool -y -d -t default-difftool'
alias gdm='git difftool -t meld -d'
alias gdv='git difftool -t vimdiff'
alias gk='gitk --all --date-order' # --simplify-by-decoration をつけると個別のコミットが隠れる
alias gl='git log --oneline --graph --decorate --all --date-order' # --simplify-by-decoration をつけると個別のコミットが隠れる
alias gconf='git config -l'
#gitコンボ
alias gsd='echo "------ git status ------";gs;echo "------ git diff --name-only ------";gd'
alias gac='git add .;git commit'
alias gacp='git add .;git commit;git push origin HEAD'

# 全てのリモートブランチをローカルに作成する
alias gba='for remote in `git branch -r`; do if [ $remote != "origin/HEAD" ] && [ $remote != "->" ]; then git branch --track ${remote#origin/} $remote; fi done'


# クリップボードへコピー(動かない)
alias pbcopy='xsel --clipboard --input'

alias dockerps="docker ps -a | awk '{print \$1}' | tail -n +2"
alias dockerimages="docker images | awk '{print \$3}' | tail -n +2"
alias dockerrm="dockerps|xargs docker stop&&dockerps|xargs docker rm"
alias dockerrmi="dockerps|xargs docker stop&&dockerps|xargs docker rm&&dockerimages|xargs docker rmi"

alias sshgce="ssh fancl01@gce"

# localのgitリポジトリに移動
alias gcd='cd $(ghq root)/$(ghq list | peco)'

# githubのリポジトリに移動
alias ghcd='hub browse $(ghq list | peco | cut -d "/" -f 2,3)'

# githubのリポジトリ一覧
alias ghls='curl -s "https://api.github.com/users/yfujii01/repos?per_page=100"|grep \"name\"|cut -d'\''"'\'' -f4'

# githubのリポジトリをcloneする
alias ghget='ghls|peco --select-1|xargs ghq get'

# historyをpecoで
export HISTCONTROL="ignoredups"
peco-history() {
    local NUM=$(history | wc -l)
    local FIRST=$((-1*(NUM-1)))

    if [ $FIRST -eq 0 ] ; then
        history -d $((HISTCMD-1))
        echo "No history" >&2
        return
    fi  

    local CMD=$(fc -l $FIRST | sort -k 2 -k 1nr | uniq -f 1 | sort -nr | sed -E 's/^[0-9]+[[:blank:]]+//' | peco | head -n 1)

    if [ -n "$CMD" ] ; then
        history -s $CMD

        if type osascript > /dev/null 2>&1 ; then
            (osascript -e 'tell application "System Events" to keystroke (ASCII character 30)' &)
        fi  
    else
        history -d $((HISTCMD-1))
    fi  
}

